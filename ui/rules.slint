import { Button, ListView, Switch, VerticalBox, StandardListView } from "std-widgets.slint";

export struct TransparencyRule {
  process_name: string,
  window_class: string,
  transparency: int,
  enabled: bool,
  wide_catch: bool,
  old_class: string,
}

export global RulesStorage {
    in-out property <[TransparencyRule]> items: [
        {
            process_name: "Demo Name",
            window_class: "DemoWindowClass",
            transparency: 80,
            enabled: true,
            wide_catch: false,
            old_class: "string",
        }
    ];
}

component DataRow inherits Rectangle {
    in property <string> process_name;
    in property <string> class_name;
    in-out property <int> transparency;
    in property <bool> enabled;
    in property <bool> wide_catch;
    in property <string> old_class;
    in-out property <TransparencyRule> rule: {
        process_name: root.process_name,
        window_class: root.class_name,
        transparency: root.transparency,
        enabled: root.enabled,
        wide_catch: root.wide_catch,
        old_class: root.old_class
    };
    callback submit(TransparencyRule);
    VerticalLayout {
        HorizontalLayout {
            spacing: 3px;
            vertical-stretch: 5;
            alignment: LayoutAlignment.space-between;
            VerticalLayout {
                max-width: 80px;
                min-width: 80px;
                Text {
                    font-size: 12px;
                    horizontal-alignment: TextHorizontalAlignment.left;
                    text: root.process_name;
                    vertical-alignment: TextVerticalAlignment.top;
                }

                Text {
                    font-size: 10px;
                    horizontal-alignment: TextHorizontalAlignment.left;
                    overflow: TextOverflow.elide;
                    text: root.class_name;
                    vertical-alignment: TextVerticalAlignment.top;
                    wrap: TextWrap.no-wrap;
                }
            }

            Switch {
                text: "";
                checked: root.enabled;
                max-width: 50px;
                min-width: 50px;
                changed checked => {
                    root.rule.enabled = self.checked;
                    root.submit(root.rule);
                }
            }

            Switch {
                max-width: 70px;
                min-width: 70px;
                text: "";
                checked: root.wide_catch;
                changed checked => {
                    root.rule.wide_catch = self.checked;
                    root.submit(root.rule);
                }
            }

            Rectangle {
                background: #161515;
                min-width: 24px;
                min-height: 16px; /* @lsp:ignore-node */
                TextInput {
                    selection-foreground-color: #00000000;
                    text: root.rule.transparency;
                    vertical-alignment: center;
                    font-italic: true;
                    horizontal-alignment: TextHorizontalAlignment.center;
                    input-type: InputType.decimal;
                    font-size: 12px;
                    changed text => {
                        if self.text.to-float() > 100 {
                            self.text = 100;
                            root.rule.transparency = 100;
                        } else if self.text.to-float() < 30 {
                            self.text = 30;
                            root.rule.transparency = 30;
                        } else {
                            root.rule.transparency = (self.text.to-float());
                            self.text = root.rule.transparency;
                            root.submit(root.rule);
                        }
                    }
                    key-pressed(event) => {
                        if (event.text == Key.UpArrow) {
                            root.rule.transparency = root.rule.transparency + 1;
                            root.submit(root.rule);
                            self.text = root.rule.transparency;
                            accept
                        }
                        if (event.text == Key.DownArrow) {
                            root.rule.transparency = root.rule.transparency - 1;
                            root.submit(root.rule);
                            self.text = root.rule.transparency;
                            accept
                        }
                        reject
                    }
                }
            }
        }

        Rectangle {
            height: 10px;
        }
    }
}

export component RulesWindow inherits Window {
    width: 325px;
    height: 400px;
    always-on-top: true;
    title: "";
    icon: @image-url("../icons/app-icon.png");
    callback cancel();
    callback submit(TransparencyRule);
    VerticalLayout {
        padding: 8px;
        Text {
            text: "Transparency Rules";
            font-size: 16px;
            font-weight: 700;
            height: 30px;
        }

        Text {
            text: "Changes made are live.";
            font-size: 12px;
            font-weight: 200;
            height: 20px;
        }

        HorizontalLayout {
            alignment: LayoutAlignment.space-between;
            min-width: 60px;
            Text {
                max-width: 80px;
                min-width: 80px;
                font-weight: 500;
                text: "Rule:";
            }

            Text {
                min-width: 50px;
                max-width: 0px;
                font-weight: 500;
                text: "Enabled:";
            }

            Text {
                horizontal-alignment: TextHorizontalAlignment.right;
                max-width: 70px;
                min-width: 70px;
                font-weight: 500;
                text: "Wide Catch:";
            }

            Text {
                horizontal-alignment: TextHorizontalAlignment.right;
                max-width: 24px;
                font-weight: 500;
                stroke-style: TextStrokeStyle.center;
                text: "Percentage:";
            }
        }

        ListView {
            padding: 30px;
            max-width: 150px;
            for data in RulesStorage.items: DataRow {
                process_name: data.process_name;
                class_name: data.window_class;
                enabled: data.enabled;
                wide_catch: data.wide_catch;
                old_class: data.old_class;
                transparency: data.transparency;
                submit => {
                    root.submit(self.rule)
                }
            }
        }

        HorizontalLayout {
            alignment: center;
            spacing: 20px;
            Button {
                text: "Close";
                width: 80px;
                height: 30px;
                clicked => {
                    root.cancel();
                }
            }
        }
    }
}
