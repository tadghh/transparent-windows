
import { VerticalBox } from "std-widgets.slint";
export struct HoverInfo {
    process_name: string,
    class_name: string,
}

export component MouseInfo inherits Window {
    in property <int> opacity_error: 0;
    width: 250px;
    height: 100px;
    always-on-top: true;
    no-frame: true;
    in property <string> process_name: "test name";
    in property <string> error_string: "test error";
    in property <string> class_name: "test class";
    Rectangle {
        border-color: #fff;
        border-width: 2px;
        VerticalLayout {
            spacing: 2px;
            padding: 5px;
            VerticalLayout {
                Text {
                    text: "Process:";
                    vertical-alignment: TextVerticalAlignment.bottom;
                    font-size: 15px;
                    font-weight: 700;
                    max-height: 14px;
                    max-width: 60px;
                }

                Text {
                    text: root.process_name;
                    font-size: 13px;
                    max-height: 14px;
                }
            }

            VerticalLayout {
                Text {
                    text: "Class:";
                    vertical-alignment: TextVerticalAlignment.bottom;
                    font-size: 15px;
                    font-weight: 700;
                    max-height: 14px;
                    max-width: 60px;
                }

                Text {
                    text: root.class_name;
                    font-size: 13px;
                    max-height: 14px;
                }
            }

            VerticalLayout {
                Text {
                    color: #ff8c00;
                    font-weight: 700;
                    opacity: root.opacity_error;
                    text: "Issue:";
                    Rectangle {
                        min-width: 16px;
                        min-height: 16px;
                    }
                }

                Text {
                    font-size: 12px;
                    horizontal-alignment: TextHorizontalAlignment.right;
                    opacity: root.opacity_error;
                    text: root.error_string;
                    vertical-alignment: TextVerticalAlignment.top;
                }
            }
        }
    }
}
